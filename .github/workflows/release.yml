name: runtime-class-manager release
on:
  push:
    tags:
      - "v*"

# Declare default permissions as read only.
permissions: read-all

jobs:
  ci:
    uses: ./.github/workflows/ci.yml
    permissions:
      contents: read
      pull-requests: read
      checks: write

  build-manager:
    name: Build manager image, sign it, and generate SBOMs
    uses: ./.github/workflows/manager-build.yml
    permissions:
      id-token: write
      packages: write
      contents: read

  build-installer:
    name: Build installer image, sign it, and generate SBOMs
    uses: ./.github/workflows/installer-build.yml
    permissions:
      id-token: write
      packages: write
      contents: read

  build-downloader:
    name: Build downloader image, sign it, and generate SBOMs
    uses: ./.github/workflows/downloader-build.yml
    permissions:
      id-token: write
      packages: write
      contents: read

  publish-chart:
    name: Publish the helm chart to the configured OCI registry
    uses: ./.github/workflows/helm-chart-release.yml
    permissions:
      packages: write
      contents: read
    needs:
      - ci
      - build-manager
      - build-installer
      - build-downloader

  release:
    name: Create release

    needs:
      - ci
      - build-manager
      - build-installer
      - build-downloader
      - publish-chart

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Retrieve tag name
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo TAG_NAME=$(echo ${{ github.ref_name }}) >> $GITHUB_ENV

      - name: Get release ID from the release created by release drafter
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            let releases = await github.rest.repos.listReleases({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });
            for (const release of releases.data) {
              if (release.draft) {
                      core.info(release)
                      core.exportVariable('RELEASE_ID', release.id)
                      return
              }
            }
            core.setFailed(`Draft release not found`)

      - name: Download SBOM artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: "*-sbom-*"
          path: ./
          merge-multiple: true

      - name: Download helm chart artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: runtime-class-manager
          path: ./

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload release assets
        id: upload_release_assets
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            let fs = require('fs');
            let path = require('path');

            // The chart version omits the leading 'v' to adhere to Helm's versioning requirements
            let chartVersion = "${{ env.TAG_NAME }}".replace("v", "");

            let files = [
              'runtime-class-manager-sbom-amd64.spdx',
              'runtime-class-manager-sbom-amd64.spdx.cert',
              'runtime-class-manager-sbom-amd64.spdx.sig',
              'runtime-class-manager-sbom-arm64.spdx',
              'runtime-class-manager-sbom-arm64.spdx.cert',
              'runtime-class-manager-sbom-arm64.spdx.sig',
              'node-installer-sbom-amd64.spdx',
              'node-installer-sbom-amd64.spdx.cert',
              'node-installer-sbom-amd64.spdx.sig',
              'node-installer-sbom-arm64.spdx',
              'node-installer-sbom-arm64.spdx.cert',
              'node-installer-sbom-arm64.spdx.sig',
              'shim-downloader-sbom-amd64.spdx',
              'shim-downloader-sbom-amd64.spdx.cert',
              'shim-downloader-sbom-amd64.spdx.sig',
              'shim-downloader-sbom-arm64.spdx',
              'shim-downloader-sbom-arm64.spdx.cert',
              'shim-downloader-sbom-arm64.spdx.sig',
              `runtime-class-manager-${chartVersion}.tgz`,
            ]
            const {RELEASE_ID} = process.env

            for (const file of files) {
              let file_data = fs.readFileSync(file);

              let response = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: `${RELEASE_ID}`,
                name: path.basename(file),
                data: file_data,
              });
            }

      - name: Publish release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const {RELEASE_ID} = process.env
            const {TAG_NAME} = process.env
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: `${RELEASE_ID}`,
              draft: false,
              tag_name: `${TAG_NAME}`,
              name: `${TAG_NAME}`,
              prerelease: `${{ contains(github.event.workflow_run.head_branch, '-alpha') || contains(github.event.workflow_run.head_branch, '-beta') || contains(github.event.workflow_run.head_branch, '-rc') }}`,
              make_latest: `${{ !(contains(github.event.workflow_run.head_branch, '-alpha') || contains(github.event.workflow_run.head_branch, '-beta') || contains(github.event.workflow_run.head_branch, '-rc')) }}`
            });
